# -*- coding: utf-8 -*-
"""LC_final06_07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zCRtK-HSlfEL3w7h3GoA0A4dDVdYGqrD
"""

# Load libraries
import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation
from google.colab import files
import matplotlib.pylab as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree
from sklearn import tree 
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score

files.upload()

# Load dataset
df = pd.read_csv('LC14.csv')
df

#droping sub columns
df = df.drop('HOW_LONG_SMOKING' ,axis='columns')
df = df.drop('CIGARETTES' ,axis='columns')
df = df.drop('FAMILY_LUNG_CANCER_HISTORY' ,axis='columns')
df = df.drop('FAMILY_MEMBER_AGE_DISEASE' ,axis='columns')
df = df.drop('FAMILY_MEMBER_SMOKING' ,axis='columns')
df = df.drop('CRISIS_TYPE' ,axis='columns')
df = df.drop('SLEEP_DISORDERS' ,axis='columns')
df = df.drop('SLEEPING_PILL' ,axis='columns')
df = df.drop('COUGHING_LONGTIME' ,axis='columns')
df = df.drop('WAKEUP_COUGHING' ,axis='columns')
df = df.drop('COUGHING_FREQUENCY' ,axis='columns')
df = df.drop('RICKETY_SPOT' ,axis='columns')
df = df.drop('SYMPTOMS_DURATION' ,axis='columns')
df = df.drop('COMORBID' ,axis='columns')
df = df.drop('LUNG_CANCER_LEVEL_DISEASE' ,axis='columns')
df = df.drop('DIAGNOSIS_MANNER' ,axis='columns')
df = df.drop('NOTES' ,axis='columns')
df

"""RUN 1 """

#split dataset in features and target variable
#RUN1= 28 colums
feature_cols =['SEX','AGE', 'MARITAL_STATUS','RELIGION','CITY',
 'LIVING_SPACE_TYPE','LIVING_ENVIOROMENT_TYPE','BASEMENT','WORK_ENVIORMENT','EDUCATION_LEVEL',
'SMOKING','PASSIVE_SMOKING','FAMILY_CANCER_HISTORY','LOST','CRISIS',
'SADNESS','STRESS','HAPINESS','PHYSICHAL_ACTIVITY','SLEEPING_HOURS','DIET','COUGHING','WEIGHT_LOSS','PHYSICHAL_ACTIVITY_DIFFICULTY',
'RICKETY_BONES','DIFFICULTY_SWALLOWING','BLOOD_MUCUS','FATIGUE']

X = df[feature_cols] # Features
y = df["LUNG_CANCER"] # Target variable
print(feature_cols)

# Encode single column 
#RUN1
labelEncoder = preprocessing.LabelEncoder()
X.SEX = labelEncoder.fit_transform(X.SEX)
X.MARITAL_STATUS = labelEncoder.fit_transform(X.MARITAL_STATUS)
X.RELIGION = labelEncoder.fit_transform(X.RELIGION)
X.CITY = labelEncoder.fit_transform(X.CITY)
X.LIVING_SPACE_TYPE = labelEncoder.fit_transform(X.LIVING_SPACE_TYPE)
X.LIVING_ENVIOROMENT_TYPE = labelEncoder.fit_transform(X.LIVING_ENVIOROMENT_TYPE)
X.BASEMENT = labelEncoder.fit_transform(X.BASEMENT)
X.WORK_ENVIORMENT = labelEncoder.fit_transform(X.WORK_ENVIORMENT)
X.EDUCATION_LEVEL = labelEncoder.fit_transform(X.EDUCATION_LEVEL)
X.SMOKING = labelEncoder.fit_transform(X.SMOKING)
X.PASSIVE_SMOKING = labelEncoder.fit_transform(X.PASSIVE_SMOKING)
X.FAMILY_CANCER_HISTORY = labelEncoder.fit_transform(X.FAMILY_CANCER_HISTORY)
X.LOST = labelEncoder.fit_transform(X.LOST)
X.CRISIS = labelEncoder.fit_transform(X.CRISIS)
X.SADNESS = labelEncoder.fit_transform(X.SADNESS)
X.STRESS = labelEncoder.fit_transform(X.STRESS)
X.HAPINESS = labelEncoder.fit_transform(X.HAPINESS)
X.PHYSICHAL_ACTIVITY = labelEncoder.fit_transform(X.PHYSICHAL_ACTIVITY)
X.SLEEPING_HOURS = labelEncoder.fit_transform(X.SLEEPING_HOURS)
X.DIET = labelEncoder.fit_transform(X.DIET)
X.COUGHING = labelEncoder.fit_transform(X.COUGHING)
X.WEIGHT_LOSS = labelEncoder.fit_transform(X.WEIGHT_LOSS)
X.PHYSICHAL_ACTIVITY_DIFFICULTY = labelEncoder.fit_transform(X.PHYSICHAL_ACTIVITY_DIFFICULTY)
X.RICKETY_BONES = labelEncoder.fit_transform(X.RICKETY_BONES)
X.DIFFICULTY_SWALLOWING = labelEncoder.fit_transform(X.DIFFICULTY_SWALLOWING)
X.PHYSICHAL_ACTIVITY = labelEncoder.fit_transform(X.PHYSICHAL_ACTIVITY)
X.BLOOD_MUCUS = labelEncoder.fit_transform(X.BLOOD_MUCUS)
X.FATIGUE = labelEncoder.fit_transform(X.FATIGUE)

y_encoder=labelEncoder.fit_transform(y)
y_encoder

#define train and test' train = 0.6 test = 0.4
x_train,x_test,y_train,y_test = train_test_split(X,y_encoder, test_size=0.4)
x_test.shape

"""RUM 1 - RANDOM FOREST"""

Rf = RandomForestClassifier(n_estimators = 1000,max_depth = 2)#, max_features=3) 
Rf.fit(x_train,y_train)

Rf_pred = Rf.predict(x_test)
print("Accuracy Random Forest Classifier", metrics.accuracy_score(y_test, Rf_pred))
Rf__train_pred = Rf.predict(x_train)
print("Accuracy  Train Random Forest Classifier", metrics.accuracy_score(y_train, Rf__train_pred))

cm = metrics.confusion_matrix(y_test,Rf_pred)
sns.heatmap(metrics.confusion_matrix(y_test,Rf_pred ), annot=True)

#RF ROC
rf_probs = Rf.predict_proba(x_test)
rf_probs[:10,:]
rf_probs = rf_probs[:,1]
rf_auc = roc_auc_score(y_test, rf_probs)
rffpr, rftpr, rf_thresholds = roc_curve(y_test, rf_probs)

def plot_roc_curve(fpr, tpr):
    plt.plot(fpr, tpr, color='orange', label='ROC')
    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend()
    plt.show()

plt.figure(dpi=150)
plt.plot(rffpr, rftpr, color='g', label='RF ROC')
#plt.plot(knnfpr, knntpr, color='b', label='Knn ROC')
#plt.plot(svmfpr, svmtpr, color='orange', label='SVM ROC')
plt.plot([0, 1], [0, 1], color='r', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend()

Rf.feature_importances_ #impotrance of each columns order by index of columns 
for i in Rf.feature_importances_:
  round(i,20)
  print(i)

"""RUN 1- KNN CLASSIFIIER"""

# instantiate the model
knn9 = KNeighborsClassifier(n_neighbors=9)
knn11 = KNeighborsClassifier(n_neighbors=11)
knn13 = KNeighborsClassifier(n_neighbors=13)

#fit the models
knn9.fit(x_train, y_train)
knn11.fit(x_train, y_train)
knn13.fit(x_train, y_train)

#prediction
y_pred_9 = knn9.predict(x_test)
y_pred_11 = knn11.predict(x_test)
y_pred_13 = knn13.predict(x_test)

print("Accuracy of kNN with k=9", accuracy_score(y_test, y_pred_9))
print("Accuracy of kNN with k=11", accuracy_score(y_test, y_pred_11))
print("Accuracy of kNN with k=13", accuracy_score(y_test, y_pred_13))

cm_9 = metrics.confusion_matrix(y_test, y_pred_9)
cm_11 = metrics.confusion_matrix(y_test, y_pred_11)
cm_13 = metrics.confusion_matrix(y_test, y_pred_13)

#KNN9
group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cm_9.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cm_9.flatten()/np.sum(cm_9)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cm_9, annot=labels, fmt='', cmap='RdBu')

#KNN11
group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cm_11.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cm_11.flatten()/np.sum(cm_11)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cm_11, annot=labels, fmt='', cmap='RdBu')

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cm_13.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cm_13.flatten()/np.sum(cm_13)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cm_13, annot=labels, fmt='', cmap='RdBu')

"""RUN 1 - Naive Bayes"""

classifier = GaussianNB()
classifier.fit(x_train, y_train)
y_train
y_predNB  =  classifier.predict(x_test)

ac = accuracy_score(y_test,y_predNB)
print("Accuracy of Naive Bayes", ac)

cm_NB = metrics.confusion_matrix(y_test, y_predNB)

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cm_NB.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cm_NB.flatten()/np.sum(cm_NB)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cm_NB, annot=labels, fmt='', cmap='RdBu')

knn9_ac = accuracy_score(y_test, y_pred_9)
knn11_ac = accuracy_score(y_test, y_pred_11)
knn13_ac = accuracy_score(y_test, y_pred_13)
acNB = accuracy_score(y_test,y_predNB)

final = {'Knn9':knn9_ac*100,'Knn11':knn11_ac*100,'Knn13':knn13_ac*100,'RF':rf_auc*100,'NB':acNB*100}
Algorithems = list(final.keys()) 
Accuracy = list(final.values()) 
   
fig = plt.figure(figsize = (8, 5)) 
  
# creating the bar plot 
plt.bar(Algorithems, Accuracy, color=('b','g','orange','red','yellow'), width = 0.4) 
    
 
plt.xlabel("Algorithems") 
plt.ylabel("Accuracy") 
plt.title("Accuracy vs. Algorithems") 
plt.show()

"""RUN 2"""

#split dataset in features and target variable
#RUN2= 14 colums
feature_cols2 = ['AGE', 'MARITAL_STATUS','CITY','BASEMENT',
        'SMOKING','PASSIVE_SMOKING','FAMILY_CANCER_HISTORY','LOST',
        'SADNESS','HAPINESS','PHYSICHAL_ACTIVITY','COUGHING','PHYSICHAL_ACTIVITY_DIFFICULTY','RICKETY_BONES'] 
#סדר הורדת עמודות
#RELIGION
#LIVING_ENVIOROMENT_TYPE
#'BLOOD_MUCUS'
#'DIFFICULTY_SWALLOWING'
#'SEX',
#'DIET',
#'WORK_ENVIORMENT',
#'EDUCATION_LEVEL',
#'LIVING_SPACE_TYPE',
#'STRESS',
#'SLEEPING_HOURS',
#'WEIGHT_LOSS',
#'CRISIS',
#,'FATIGUE'

X2 = df[feature_cols2] # Features
y = df["LUNG_CANCER"] # Target variable
print(feature_cols2)

# Encode single column 
#RUN2
labelEncoder = preprocessing.LabelEncoder()
X2.MARITAL_STATUS = labelEncoder.fit_transform(X2.MARITAL_STATUS)
X2.CITY = labelEncoder.fit_transform(X2.CITY)
X2.BASEMENT = labelEncoder.fit_transform(X2.BASEMENT)
X2.SMOKING = labelEncoder.fit_transform(X2.SMOKING)
X2.PASSIVE_SMOKING = labelEncoder.fit_transform(X2.PASSIVE_SMOKING)
X2.FAMILY_CANCER_HISTORY = labelEncoder.fit_transform(X2.FAMILY_CANCER_HISTORY)
X2.LOST = labelEncoder.fit_transform(X2.LOST)
X2.SADNESS = labelEncoder.fit_transform(X2.SADNESS)
X2.HAPINESS = labelEncoder.fit_transform(X2.HAPINESS)
X2.PHYSICHAL_ACTIVITY = labelEncoder.fit_transform(X2.PHYSICHAL_ACTIVITY)
X2.COUGHING = labelEncoder.fit_transform(X2.COUGHING)
X2.PHYSICHAL_ACTIVITY_DIFFICULTY = labelEncoder.fit_transform(X2.PHYSICHAL_ACTIVITY_DIFFICULTY)
X2.RICKETY_BONES = labelEncoder.fit_transform(X2.RICKETY_BONES)

y_encoder=labelEncoder.fit_transform(y)
#y_encoder

#define train and test' train = 0.6 test = 0.4
x2_train,x2_test,y_train,y_test = train_test_split(X2,y_encoder, test_size=0.4)
x2_test.shape

Rf2 = RandomForestClassifier(n_estimators = 1000)# ,max_depth = 2)#, max_features=5) 
Rf2.fit(x2_train,y_train)

Rf_pred2 = Rf2.predict(x2_test)
print("Accuracy Random Forest Classifier", metrics.accuracy_score(y_test, Rf_pred2))
Rf__train_pred2 = Rf2.predict(x2_train)
print("Accuracy  Train Random Forest Classifier", metrics.accuracy_score(y_train, Rf__train_pred2))

print('predict_proba',Rf2.predict_proba(x2_test))
cm = metrics.confusion_matrix(y_test,Rf_pred2)
sns.heatmap(metrics.confusion_matrix(y_test,Rf_pred2), annot=True)





Rf2.feature_importances_ #impotrance of each columns order by index of columns 
for i in Rf2.feature_importances_:
  round(i,20)
  print(i)

plt.figure(figsize = (20,15))

_ = tree.plot_tree(Rf2.estimators_[10], feature_names=X2.columns, filled=True)

cm_rf = metrics.confusion_matrix(y_test,Rf_pred2)
group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cm_rf.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cm_rf.flatten()/np.sum(cm_rf)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cm_rf, annot=labels, fmt='', cmap='RdBu')

"""RUN 3"""

#split dataset in features and target variable
#RUN3
feature_cols3 = ['AGE','CITY','PASSIVE_SMOKING','SADNESS','COUGHING','PHYSICHAL_ACTIVITY_DIFFICULTY','RICKETY_BONES'] 

X3 = df[feature_cols3] # Features
y = df["LUNG_CANCER"] # Target variable
print(feature_cols3)

# Encode single column 
#RUN3
labelEncoder = preprocessing.LabelEncoder()
X3.CITY = labelEncoder.fit_transform(X3.CITY)
X3.PASSIVE_SMOKING = labelEncoder.fit_transform(X3.PASSIVE_SMOKING)
X3.SADNESS = labelEncoder.fit_transform(X3.SADNESS)
X3.COUGHING = labelEncoder.fit_transform(X3.COUGHING)
X3.PHYSICHAL_ACTIVITY_DIFFICULTY = labelEncoder.fit_transform(X3.PHYSICHAL_ACTIVITY_DIFFICULTY)
X3.RICKETY_BONES = labelEncoder.fit_transform(X3.RICKETY_BONES)

y_encoder=labelEncoder.fit_transform(y)

#define train and test' train = 0.6 test = 0.4
x3_train,x3_test,y_train,y_test = train_test_split(X3,y_encoder, test_size=0.4)
x3_test.shape

Rf3 = RandomForestClassifier(n_estimators = 1000 ,max_depth = 2)#, max_features=5) 
Rf3.fit(x3_train,y_train)

Rf_pred3 = Rf3.predict(x3_test)
print("Accuracy Random Forest Classifier", metrics.accuracy_score(y_test, Rf_pred3))
Rf__train_pred3 = Rf3.predict(x3_train)
print("Accuracy  Train Random Forest Classifier", metrics.accuracy_score(y_train, Rf__train_pred3))

print('predict_proba',Rf3.predict_proba(x3_test))
cm = metrics.confusion_matrix(y_test,Rf_pred3)
sns.heatmap(metrics.confusion_matrix(y_test,Rf_pred3), annot=True)

plt.figure(figsize = (20,15))

_ = tree.plot_tree(Rf3.estimators_[10], feature_names=X2.columns, filled=True)

cm_rf = metrics.confusion_matrix(y_test,Rf_pred3)
group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cm_rf.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cm_rf.flatten()/np.sum(cm_rf)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cm_rf, annot=labels, fmt='', cmap='RdBu')